import telebot
import requests
import datetime
from googletrans import Translator
from telebot import types


class SpaceBot:
    def __init__(self, api_token):
        self.bot = telebot.TeleBot(api_token)
        self.translator = Translator()
        self.register_handlers()

    def register_handlers(self):
        @self.bot.message_handler(commands=["start"])
        def main(message):
            self.bot.send_message(
                message.chat.id, f"{message.from_user.first_name}! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –º–æ—ë–º –±–æ—Ç–µ –æ –∫–æ—Å–º–æ—Å–µ! üå†"
            )
            self.menu(message)

        @self.bot.callback_query_handler(
            func=lambda call: call.data
            in ["get_photo", "people_in_space", "photo_by_date", "wiki"]
        )
        def handle_query(call):
            if call.data == "get_photo":
                self.get_photo_of_the_day(call.message)
                self.menu(call.message)  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
            elif call.data == "people_in_space":
                self.people_in_space(call.message)
                self.menu(
                    call.message
                )  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª—é–¥—è—Ö –≤ –∫–æ—Å–º–æ—Å–µ
            elif call.data == "photo_by_date":
                self.bot.send_message(
                    call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î üìÖ:"
                )
                self.bot.register_next_step_handler(
                    call.message, self.process_date_input
                )

    def menu(self, message):  # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ –¥–Ω—è üåå", callback_data="get_photo"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "–°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π —Å–µ–π—á–∞—Å –≤ –∫–æ—Å–º–æ—Å–µüßë‚ÄçüöÄ", callback_data="people_in_space"
            )
        )
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ç–æ –¥–Ω—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É üìÖ", callback_data="photo_by_date"))
        self.bot.send_message(message.chat.id, "–ú–µ–Ω—é üìî: ", reply_markup=markup)

    def get_photo_of_the_day(self, message):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–Ω—è
        url = "https://api.nasa.gov/planetary/apod?api_key=wW8ahl4j6ZoIsbV7vJ9bbvh4Gagjy3nKhoV2hqiJ"
        res = requests.get(url)

        if res.status_code == 200:
            data = res.json()
            image_url = data["url"]
            explanation = data["explanation"]
            translated_explanation = self.translator.translate(
                explanation, dest="ru"
            ).text

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            if len(translated_explanation) < 1024:
                self.bot.send_photo(
                    message.chat.id, image_url, caption=translated_explanation
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
                self.bot.send_photo(message.chat.id, image_url)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                self.bot.send_message(message.chat.id, translated_explanation)
        else:
            self.bot.send_message(
                message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–Ω—è. ‚ùå"
            )

    def get_photo_of_the_day_by_date(self, message, date):
        # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–ì–ì–ì–ì-–ú–ú-–î–î'
        url = f"https://api.nasa.gov/planetary/apod?api_key=wW8ahl4j6ZoIsbV7vJ9bbvh4Gagjy3nKhoV2hqiJ&date={date}"
        res = requests.get(url)

        if res.status_code == 200:
            data = res.json()
            image_url = data["url"]
            explanation = data["explanation"]
            translated_explanation = self.translator.translate(
                explanation, dest="ru"
            ).text

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            if len(translated_explanation) < 1024:
                self.bot.send_photo(
                    message.chat.id, image_url, caption=translated_explanation
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
                self.bot.send_photo(message.chat.id, image_url)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                self.bot.send_message(message.chat.id, translated_explanation)

            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
            self.menu(message)
        else:
            self.bot.send_message(
                message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–Ω—è. ‚ùå"
            )
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
            self.menu(message)

    def process_date_input(self, message):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        date = message.text
        try:
            datetime.datetime.strptime(date, "%Y-%m-%d")
            self.get_photo_of_the_day_by_date(message, date)
        except ValueError:
            self.bot.send_message(
                message.chat.id,
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. ‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.",
            )
            self.bot.register_next_step_handler(message, self.process_date_input)

    def people_in_space(self, message):
        url = "http://api.open-notify.org/astros.json"
        res = requests.get(url)

        if res.status_code == 200:
            data = res.json()
            people = data["people"]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª—é–¥—è—Ö –≤ –∫–æ—Å–º–æ—Å–µ
            response_text = "–í –∫–æ—Å–º–æ—Å–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç—ã:\n\n"

            for i, person in enumerate(
                people, start=1
            ):
                response_text += f"{i}. {person['name']} –Ω–∞ {'–ú–ö–°' if person['craft'] == 'ISS' else '–¢—è–Ω—å–≥—É–Ω'}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(message.chat.id, response_text)
        else:
            self.bot.send_message(
                message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª—é–¥—è—Ö –≤ –∫–æ—Å–º–æ—Å–µ. ‚ùå"
            )

    def run(self):
        self.bot.polling()
